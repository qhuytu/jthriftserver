/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qhuytu.jthriftfiles.services;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-07-02")
public class NoteService {

  public interface Iface {

    public void addNote(com.qhuytu.jthriftfiles.structs.Note note) throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> getNotes() throws org.apache.thrift.TException;

    public com.qhuytu.jthriftfiles.structs.Note getNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException;

    public void updateNote(com.qhuytu.jthriftfiles.structs.Note note) throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException;

    public void deleteNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException;

    public void triggerNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addNote(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getNotes(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> resultHandler) throws org.apache.thrift.TException;

    public void getNote(int id, org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note> resultHandler) throws org.apache.thrift.TException;

    public void updateNote(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteNote(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void triggerNote(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addNote(com.qhuytu.jthriftfiles.structs.Note note) throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, org.apache.thrift.TException
    {
      send_addNote(note);
      recv_addNote();
    }

    public void send_addNote(com.qhuytu.jthriftfiles.structs.Note note) throws org.apache.thrift.TException
    {
      addNote_args args = new addNote_args();
      args.setNote(note);
      sendBase("addNote", args);
    }

    public void recv_addNote() throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, org.apache.thrift.TException
    {
      addNote_result result = new addNote_result();
      receiveBase(result, "addNote");
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> getNotes() throws org.apache.thrift.TException
    {
      send_getNotes();
      return recv_getNotes();
    }

    public void send_getNotes() throws org.apache.thrift.TException
    {
      getNotes_args args = new getNotes_args();
      sendBase("getNotes", args);
    }

    public java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> recv_getNotes() throws org.apache.thrift.TException
    {
      getNotes_result result = new getNotes_result();
      receiveBase(result, "getNotes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNotes failed: unknown result");
    }

    public com.qhuytu.jthriftfiles.structs.Note getNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      send_getNote(id);
      return recv_getNote();
    }

    public void send_getNote(int id) throws org.apache.thrift.TException
    {
      getNote_args args = new getNote_args();
      args.setId(id);
      sendBase("getNote", args);
    }

    public com.qhuytu.jthriftfiles.structs.Note recv_getNote() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      getNote_result result = new getNote_result();
      receiveBase(result, "getNote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.cnfe != null) {
        throw result.cnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNote failed: unknown result");
    }

    public void updateNote(com.qhuytu.jthriftfiles.structs.Note note) throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      send_updateNote(note);
      recv_updateNote();
    }

    public void send_updateNote(com.qhuytu.jthriftfiles.structs.Note note) throws org.apache.thrift.TException
    {
      updateNote_args args = new updateNote_args();
      args.setNote(note);
      sendBase("updateNote", args);
    }

    public void recv_updateNote() throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      updateNote_result result = new updateNote_result();
      receiveBase(result, "updateNote");
      if (result.ite != null) {
        throw result.ite;
      }
      if (result.cnfe != null) {
        throw result.cnfe;
      }
      return;
    }

    public void deleteNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      send_deleteNote(id);
      recv_deleteNote();
    }

    public void send_deleteNote(int id) throws org.apache.thrift.TException
    {
      deleteNote_args args = new deleteNote_args();
      args.setId(id);
      sendBase("deleteNote", args);
    }

    public void recv_deleteNote() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      deleteNote_result result = new deleteNote_result();
      receiveBase(result, "deleteNote");
      if (result.cnfe != null) {
        throw result.cnfe;
      }
      return;
    }

    public void triggerNote(int id) throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      send_triggerNote(id);
      recv_triggerNote();
    }

    public void send_triggerNote(int id) throws org.apache.thrift.TException
    {
      triggerNote_args args = new triggerNote_args();
      args.setId(id);
      sendBase("triggerNote", args);
    }

    public void recv_triggerNote() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException
    {
      triggerNote_result result = new triggerNote_result();
      receiveBase(result, "triggerNote");
      if (result.cnfe != null) {
        throw result.cnfe;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addNote(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNote_call method_call = new addNote_call(note, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNote_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.qhuytu.jthriftfiles.structs.Note note;
      public addNote_call(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.note = note;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNote_args args = new addNote_args();
        args.setNote(note);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getNotes(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNotes_call method_call = new getNotes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNotes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> {
      public getNotes_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNotes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNotes_args args = new getNotes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNotes();
      }
    }

    public void getNote(int id, org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNote_call method_call = new getNote_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNote_call extends org.apache.thrift.async.TAsyncMethodCall<com.qhuytu.jthriftfiles.structs.Note> {
      private int id;
      public getNote_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNote_args args = new getNote_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.qhuytu.jthriftfiles.structs.Note getResult() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNote();
      }
    }

    public void updateNote(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNote_call method_call = new updateNote_call(note, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNote_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.qhuytu.jthriftfiles.structs.Note note;
      public updateNote_call(com.qhuytu.jthriftfiles.structs.Note note, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.note = note;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNote_args args = new updateNote_args();
        args.setNote(note);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.qhuytu.jthriftfiles.exceptions.InvalidTypeException, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteNote(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteNote_call method_call = new deleteNote_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteNote_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteNote_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteNote_args args = new deleteNote_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void triggerNote(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerNote_call method_call = new triggerNote_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class triggerNote_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public triggerNote_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerNote_args args = new triggerNote_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.qhuytu.jthriftfiles.exceptions.CanNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addNote", new addNote());
      processMap.put("getNotes", new getNotes());
      processMap.put("getNote", new getNote());
      processMap.put("updateNote", new updateNote());
      processMap.put("deleteNote", new deleteNote());
      processMap.put("triggerNote", new triggerNote());
      return processMap;
    }

    public static class addNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNote_args> {
      public addNote() {
        super("addNote");
      }

      public addNote_args getEmptyArgsInstance() {
        return new addNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addNote_result getResult(I iface, addNote_args args) throws org.apache.thrift.TException {
        addNote_result result = new addNote_result();
        try {
          iface.addNote(args.note);
        } catch (com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite) {
          result.ite = ite;
        }
        return result;
      }
    }

    public static class getNotes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNotes_args> {
      public getNotes() {
        super("getNotes");
      }

      public getNotes_args getEmptyArgsInstance() {
        return new getNotes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getNotes_result getResult(I iface, getNotes_args args) throws org.apache.thrift.TException {
        getNotes_result result = new getNotes_result();
        result.success = iface.getNotes();
        return result;
      }
    }

    public static class getNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNote_args> {
      public getNote() {
        super("getNote");
      }

      public getNote_args getEmptyArgsInstance() {
        return new getNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getNote_result getResult(I iface, getNote_args args) throws org.apache.thrift.TException {
        getNote_result result = new getNote_result();
        try {
          result.success = iface.getNote(args.id);
        } catch (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
          result.cnfe = cnfe;
        }
        return result;
      }
    }

    public static class updateNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNote_args> {
      public updateNote() {
        super("updateNote");
      }

      public updateNote_args getEmptyArgsInstance() {
        return new updateNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateNote_result getResult(I iface, updateNote_args args) throws org.apache.thrift.TException {
        updateNote_result result = new updateNote_result();
        try {
          iface.updateNote(args.note);
        } catch (com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite) {
          result.ite = ite;
        } catch (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
          result.cnfe = cnfe;
        }
        return result;
      }
    }

    public static class deleteNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteNote_args> {
      public deleteNote() {
        super("deleteNote");
      }

      public deleteNote_args getEmptyArgsInstance() {
        return new deleteNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deleteNote_result getResult(I iface, deleteNote_args args) throws org.apache.thrift.TException {
        deleteNote_result result = new deleteNote_result();
        try {
          iface.deleteNote(args.id);
        } catch (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
          result.cnfe = cnfe;
        }
        return result;
      }
    }

    public static class triggerNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerNote_args> {
      public triggerNote() {
        super("triggerNote");
      }

      public triggerNote_args getEmptyArgsInstance() {
        return new triggerNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public triggerNote_result getResult(I iface, triggerNote_args args) throws org.apache.thrift.TException {
        triggerNote_result result = new triggerNote_result();
        try {
          iface.triggerNote(args.id);
        } catch (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
          result.cnfe = cnfe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addNote", new addNote());
      processMap.put("getNotes", new getNotes());
      processMap.put("getNote", new getNote());
      processMap.put("updateNote", new updateNote());
      processMap.put("deleteNote", new deleteNote());
      processMap.put("triggerNote", new triggerNote());
      return processMap;
    }

    public static class addNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNote_args, Void> {
      public addNote() {
        super("addNote");
      }

      public addNote_args getEmptyArgsInstance() {
        return new addNote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addNote_result result = new addNote_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addNote_result result = new addNote_result();
            if (e instanceof com.qhuytu.jthriftfiles.exceptions.InvalidTypeException) {
              result.ite = (com.qhuytu.jthriftfiles.exceptions.InvalidTypeException) e;
              result.setIteIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addNote(args.note,resultHandler);
      }
    }

    public static class getNotes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNotes_args, java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> {
      public getNotes() {
        super("getNotes");
      }

      public getNotes_args getEmptyArgsInstance() {
        return new getNotes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>>() { 
          public void onComplete(java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> o) {
            getNotes_result result = new getNotes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNotes_result result = new getNotes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNotes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>> resultHandler) throws org.apache.thrift.TException {
        iface.getNotes(resultHandler);
      }
    }

    public static class getNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNote_args, com.qhuytu.jthriftfiles.structs.Note> {
      public getNote() {
        super("getNote");
      }

      public getNote_args getEmptyArgsInstance() {
        return new getNote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note>() { 
          public void onComplete(com.qhuytu.jthriftfiles.structs.Note o) {
            getNote_result result = new getNote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNote_result result = new getNote_result();
            if (e instanceof com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) {
              result.cnfe = (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) e;
              result.setCnfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNote_args args, org.apache.thrift.async.AsyncMethodCallback<com.qhuytu.jthriftfiles.structs.Note> resultHandler) throws org.apache.thrift.TException {
        iface.getNote(args.id,resultHandler);
      }
    }

    public static class updateNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNote_args, Void> {
      public updateNote() {
        super("updateNote");
      }

      public updateNote_args getEmptyArgsInstance() {
        return new updateNote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateNote_result result = new updateNote_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateNote_result result = new updateNote_result();
            if (e instanceof com.qhuytu.jthriftfiles.exceptions.InvalidTypeException) {
              result.ite = (com.qhuytu.jthriftfiles.exceptions.InvalidTypeException) e;
              result.setIteIsSet(true);
              msg = result;
            } else if (e instanceof com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) {
              result.cnfe = (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) e;
              result.setCnfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateNote(args.note,resultHandler);
      }
    }

    public static class deleteNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteNote_args, Void> {
      public deleteNote() {
        super("deleteNote");
      }

      public deleteNote_args getEmptyArgsInstance() {
        return new deleteNote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteNote_result result = new deleteNote_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteNote_result result = new deleteNote_result();
            if (e instanceof com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) {
              result.cnfe = (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) e;
              result.setCnfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteNote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteNote(args.id,resultHandler);
      }
    }

    public static class triggerNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, triggerNote_args, Void> {
      public triggerNote() {
        super("triggerNote");
      }

      public triggerNote_args getEmptyArgsInstance() {
        return new triggerNote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            triggerNote_result result = new triggerNote_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            triggerNote_result result = new triggerNote_result();
            if (e instanceof com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) {
              result.cnfe = (com.qhuytu.jthriftfiles.exceptions.CanNotFoundException) e;
              result.setCnfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, triggerNote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.triggerNote(args.id,resultHandler);
      }
    }

  }

  public static class addNote_args implements org.apache.thrift.TBase<addNote_args, addNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNote_args");

    private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNote_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note note; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTE((short)1, "note");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTE
            return NOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.structs.Note.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNote_args.class, metaDataMap);
    }

    public addNote_args() {
    }

    public addNote_args(
      com.qhuytu.jthriftfiles.structs.Note note)
    {
      this();
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNote_args(addNote_args other) {
      if (other.isSetNote()) {
        this.note = new com.qhuytu.jthriftfiles.structs.Note(other.note);
      }
    }

    public addNote_args deepCopy() {
      return new addNote_args(this);
    }

    @Override
    public void clear() {
      this.note = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.structs.Note getNote() {
      return this.note;
    }

    public addNote_args setNote(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note note) {
      this.note = note;
      return this;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been assigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((com.qhuytu.jthriftfiles.structs.Note)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTE:
        return getNote();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOTE:
        return isSetNote();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNote_args)
        return this.equals((addNote_args)that);
      return false;
    }

    public boolean equals(addNote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
      if (isSetNote())
        hashCode = hashCode * 8191 + note.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNote_args(");
      boolean first = true;

      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (note != null) {
        note.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNote_argsStandardScheme getScheme() {
        return new addNote_argsStandardScheme();
      }
    }

    private static class addNote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.note = new com.qhuytu.jthriftfiles.structs.Note();
                struct.note.read(iprot);
                struct.setNoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.note != null) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          struct.note.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNote_argsTupleScheme getScheme() {
        return new addNote_argsTupleScheme();
      }
    }

    private static class addNote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNote()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNote()) {
          struct.note.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.note = new com.qhuytu.jthriftfiles.structs.Note();
          struct.note.read(iprot);
          struct.setNoteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNote_result implements org.apache.thrift.TBase<addNote_result, addNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNote_result");

    private static final org.apache.thrift.protocol.TField ITE_FIELD_DESC = new org.apache.thrift.protocol.TField("ite", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNote_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITE((short)1, "ite");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new org.apache.thrift.meta_data.FieldMetaData("ite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.InvalidTypeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNote_result.class, metaDataMap);
    }

    public addNote_result() {
    }

    public addNote_result(
      com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNote_result(addNote_result other) {
      if (other.isSetIte()) {
        this.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException(other.ite);
      }
    }

    public addNote_result deepCopy() {
      return new addNote_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.InvalidTypeException getIte() {
      return this.ite;
    }

    public addNote_result setIte(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite) {
      this.ite = ite;
      return this;
    }

    public void unsetIte() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been assigned a value) and false otherwise */
    public boolean isSetIte() {
      return this.ite != null;
    }

    public void setIteIsSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unsetIte();
        } else {
          setIte((com.qhuytu.jthriftfiles.exceptions.InvalidTypeException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return getIte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return isSetIte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNote_result)
        return this.equals((addNote_result)that);
      return false;
    }

    public boolean equals(addNote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ite = true && this.isSetIte();
      boolean that_present_ite = true && that.isSetIte();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIte()) ? 131071 : 524287);
      if (isSetIte())
        hashCode = hashCode * 8191 + ite.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIte()).compareTo(other.isSetIte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ite, other.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNote_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNote_resultStandardScheme getScheme() {
        return new addNote_resultStandardScheme();
      }
    }

    private static class addNote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException();
                struct.ite.read(iprot);
                struct.setIteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ite != null) {
          oprot.writeFieldBegin(ITE_FIELD_DESC);
          struct.ite.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNote_resultTupleScheme getScheme() {
        return new addNote_resultTupleScheme();
      }
    }

    private static class addNote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIte()) {
          struct.ite.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException();
          struct.ite.read(iprot);
          struct.setIteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNotes_args implements org.apache.thrift.TBase<getNotes_args, getNotes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNotes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotes_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNotes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNotes_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotes_args.class, metaDataMap);
    }

    public getNotes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotes_args(getNotes_args other) {
    }

    public getNotes_args deepCopy() {
      return new getNotes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotes_args)
        return this.equals((getNotes_args)that);
      return false;
    }

    public boolean equals(getNotes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getNotes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNotes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNotes_argsStandardScheme getScheme() {
        return new getNotes_argsStandardScheme();
      }
    }

    private static class getNotes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNotes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNotes_argsTupleScheme getScheme() {
        return new getNotes_argsTupleScheme();
      }
    }

    private static class getNotes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNotes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNotes_result implements org.apache.thrift.TBase<getNotes_result, getNotes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNotes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNotes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNotes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNotes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.structs.Note.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNotes_result.class, metaDataMap);
    }

    public getNotes_result() {
    }

    public getNotes_result(
      java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotes_result(getNotes_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> __this__success = new java.util.HashMap<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>(other.success.size());
        for (java.util.Map.Entry<java.lang.Integer, com.qhuytu.jthriftfiles.structs.Note> other_element : other.success.entrySet()) {

          java.lang.Integer other_element_key = other_element.getKey();
          com.qhuytu.jthriftfiles.structs.Note other_element_value = other_element.getValue();

          java.lang.Integer __this__success_copy_key = other_element_key;

          com.qhuytu.jthriftfiles.structs.Note __this__success_copy_value = new com.qhuytu.jthriftfiles.structs.Note(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getNotes_result deepCopy() {
      return new getNotes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, com.qhuytu.jthriftfiles.structs.Note val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> getSuccess() {
      return this.success;
    }

    public getNotes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotes_result)
        return this.equals((getNotes_result)that);
      return false;
    }

    public boolean equals(getNotes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNotes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNotes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNotes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNotes_resultStandardScheme getScheme() {
        return new getNotes_resultStandardScheme();
      }
    }

    private static class getNotes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNotes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNotes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>(2*_map0.size);
                  int _key1;
                  @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readI32();
                    _val2 = new com.qhuytu.jthriftfiles.structs.Note();
                    _val2.read(iprot);
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNotes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.Integer, com.qhuytu.jthriftfiles.structs.Note> _iter4 : struct.success.entrySet())
            {
              oprot.writeI32(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNotes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNotes_resultTupleScheme getScheme() {
        return new getNotes_resultTupleScheme();
      }
    }

    private static class getNotes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNotes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNotes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.Integer, com.qhuytu.jthriftfiles.structs.Note> _iter5 : struct.success.entrySet())
            {
              oprot.writeI32(_iter5.getKey());
              _iter5.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNotes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.Integer,com.qhuytu.jthriftfiles.structs.Note>(2*_map6.size);
            int _key7;
            @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readI32();
              _val8 = new com.qhuytu.jthriftfiles.structs.Note();
              _val8.read(iprot);
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNote_args implements org.apache.thrift.TBase<getNote_args, getNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNote_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNote_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNote_args.class, metaDataMap);
    }

    public getNote_args() {
    }

    public getNote_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_args(getNote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getNote_args deepCopy() {
      return new getNote_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getNote_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_args)
        return this.equals((getNote_args)that);
      return false;
    }

    public boolean equals(getNote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(getNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNote_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNote_argsStandardScheme getScheme() {
        return new getNote_argsStandardScheme();
      }
    }

    private static class getNote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNote_argsTupleScheme getScheme() {
        return new getNote_argsTupleScheme();
      }
    }

    private static class getNote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNote_result implements org.apache.thrift.TBase<getNote_result, getNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnfe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNote_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note success; // required
    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CNFE((short)1, "cnfe");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CNFE
            return CNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.structs.Note.class)));
      tmpMap.put(_Fields.CNFE, new org.apache.thrift.meta_data.FieldMetaData("cnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNote_result.class, metaDataMap);
    }

    public getNote_result() {
    }

    public getNote_result(
      com.qhuytu.jthriftfiles.structs.Note success,
      com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe)
    {
      this();
      this.success = success;
      this.cnfe = cnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_result(getNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.qhuytu.jthriftfiles.structs.Note(other.success);
      }
      if (other.isSetCnfe()) {
        this.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException(other.cnfe);
      }
    }

    public getNote_result deepCopy() {
      return new getNote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.cnfe = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.structs.Note getSuccess() {
      return this.success;
    }

    public getNote_result setSuccess(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.CanNotFoundException getCnfe() {
      return this.cnfe;
    }

    public getNote_result setCnfe(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
      this.cnfe = cnfe;
      return this;
    }

    public void unsetCnfe() {
      this.cnfe = null;
    }

    /** Returns true if field cnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetCnfe() {
      return this.cnfe != null;
    }

    public void setCnfeIsSet(boolean value) {
      if (!value) {
        this.cnfe = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.qhuytu.jthriftfiles.structs.Note)value);
        }
        break;

      case CNFE:
        if (value == null) {
          unsetCnfe();
        } else {
          setCnfe((com.qhuytu.jthriftfiles.exceptions.CanNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CNFE:
        return getCnfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CNFE:
        return isSetCnfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_result)
        return this.equals((getNote_result)that);
      return false;
    }

    public boolean equals(getNote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_cnfe = true && this.isSetCnfe();
      boolean that_present_cnfe = true && that.isSetCnfe();
      if (this_present_cnfe || that_present_cnfe) {
        if (!(this_present_cnfe && that_present_cnfe))
          return false;
        if (!this.cnfe.equals(that.cnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetCnfe()) ? 131071 : 524287);
      if (isSetCnfe())
        hashCode = hashCode * 8191 + cnfe.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCnfe()).compareTo(other.isSetCnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnfe, other.cnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cnfe:");
      if (this.cnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.cnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNote_resultStandardScheme getScheme() {
        return new getNote_resultStandardScheme();
      }
    }

    private static class getNote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.qhuytu.jthriftfiles.structs.Note();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
                struct.cnfe.read(iprot);
                struct.setCnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cnfe != null) {
          oprot.writeFieldBegin(CNFE_FIELD_DESC);
          struct.cnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNote_resultTupleScheme getScheme() {
        return new getNote_resultTupleScheme();
      }
    }

    private static class getNote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCnfe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCnfe()) {
          struct.cnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.qhuytu.jthriftfiles.structs.Note();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
          struct.cnfe.read(iprot);
          struct.setCnfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateNote_args implements org.apache.thrift.TBase<updateNote_args, updateNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNote_args");

    private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateNote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateNote_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note note; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOTE((short)1, "note");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOTE
            return NOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.structs.Note.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNote_args.class, metaDataMap);
    }

    public updateNote_args() {
    }

    public updateNote_args(
      com.qhuytu.jthriftfiles.structs.Note note)
    {
      this();
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_args(updateNote_args other) {
      if (other.isSetNote()) {
        this.note = new com.qhuytu.jthriftfiles.structs.Note(other.note);
      }
    }

    public updateNote_args deepCopy() {
      return new updateNote_args(this);
    }

    @Override
    public void clear() {
      this.note = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.structs.Note getNote() {
      return this.note;
    }

    public updateNote_args setNote(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.structs.Note note) {
      this.note = note;
      return this;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been assigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((com.qhuytu.jthriftfiles.structs.Note)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOTE:
        return getNote();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOTE:
        return isSetNote();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_args)
        return this.equals((updateNote_args)that);
      return false;
    }

    public boolean equals(updateNote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
      if (isSetNote())
        hashCode = hashCode * 8191 + note.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateNote_args(");
      boolean first = true;

      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (note != null) {
        note.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNote_argsStandardScheme getScheme() {
        return new updateNote_argsStandardScheme();
      }
    }

    private static class updateNote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.note = new com.qhuytu.jthriftfiles.structs.Note();
                struct.note.read(iprot);
                struct.setNoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.note != null) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          struct.note.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNote_argsTupleScheme getScheme() {
        return new updateNote_argsTupleScheme();
      }
    }

    private static class updateNote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNote()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNote()) {
          struct.note.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.note = new com.qhuytu.jthriftfiles.structs.Note();
          struct.note.read(iprot);
          struct.setNoteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateNote_result implements org.apache.thrift.TBase<updateNote_result, updateNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNote_result");

    private static final org.apache.thrift.protocol.TField ITE_FIELD_DESC = new org.apache.thrift.protocol.TField("ite", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateNote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateNote_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite; // required
    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITE((short)1, "ite"),
      CNFE((short)2, "cnfe");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          case 2: // CNFE
            return CNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new org.apache.thrift.meta_data.FieldMetaData("ite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.InvalidTypeException.class)));
      tmpMap.put(_Fields.CNFE, new org.apache.thrift.meta_data.FieldMetaData("cnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNote_result.class, metaDataMap);
    }

    public updateNote_result() {
    }

    public updateNote_result(
      com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite,
      com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe)
    {
      this();
      this.ite = ite;
      this.cnfe = cnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_result(updateNote_result other) {
      if (other.isSetIte()) {
        this.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException(other.ite);
      }
      if (other.isSetCnfe()) {
        this.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException(other.cnfe);
      }
    }

    public updateNote_result deepCopy() {
      return new updateNote_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
      this.cnfe = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.InvalidTypeException getIte() {
      return this.ite;
    }

    public updateNote_result setIte(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.InvalidTypeException ite) {
      this.ite = ite;
      return this;
    }

    public void unsetIte() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been assigned a value) and false otherwise */
    public boolean isSetIte() {
      return this.ite != null;
    }

    public void setIteIsSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.CanNotFoundException getCnfe() {
      return this.cnfe;
    }

    public updateNote_result setCnfe(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
      this.cnfe = cnfe;
      return this;
    }

    public void unsetCnfe() {
      this.cnfe = null;
    }

    /** Returns true if field cnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetCnfe() {
      return this.cnfe != null;
    }

    public void setCnfeIsSet(boolean value) {
      if (!value) {
        this.cnfe = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unsetIte();
        } else {
          setIte((com.qhuytu.jthriftfiles.exceptions.InvalidTypeException)value);
        }
        break;

      case CNFE:
        if (value == null) {
          unsetCnfe();
        } else {
          setCnfe((com.qhuytu.jthriftfiles.exceptions.CanNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return getIte();

      case CNFE:
        return getCnfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return isSetIte();
      case CNFE:
        return isSetCnfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_result)
        return this.equals((updateNote_result)that);
      return false;
    }

    public boolean equals(updateNote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ite = true && this.isSetIte();
      boolean that_present_ite = true && that.isSetIte();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      boolean this_present_cnfe = true && this.isSetCnfe();
      boolean that_present_cnfe = true && that.isSetCnfe();
      if (this_present_cnfe || that_present_cnfe) {
        if (!(this_present_cnfe && that_present_cnfe))
          return false;
        if (!this.cnfe.equals(that.cnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIte()) ? 131071 : 524287);
      if (isSetIte())
        hashCode = hashCode * 8191 + ite.hashCode();

      hashCode = hashCode * 8191 + ((isSetCnfe()) ? 131071 : 524287);
      if (isSetCnfe())
        hashCode = hashCode * 8191 + cnfe.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIte()).compareTo(other.isSetIte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ite, other.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCnfe()).compareTo(other.isSetCnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnfe, other.cnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateNote_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cnfe:");
      if (this.cnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.cnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNote_resultStandardScheme getScheme() {
        return new updateNote_resultStandardScheme();
      }
    }

    private static class updateNote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException();
                struct.ite.read(iprot);
                struct.setIteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
                struct.cnfe.read(iprot);
                struct.setCnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ite != null) {
          oprot.writeFieldBegin(ITE_FIELD_DESC);
          struct.ite.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cnfe != null) {
          oprot.writeFieldBegin(CNFE_FIELD_DESC);
          struct.cnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNote_resultTupleScheme getScheme() {
        return new updateNote_resultTupleScheme();
      }
    }

    private static class updateNote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIte()) {
          optionals.set(0);
        }
        if (struct.isSetCnfe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIte()) {
          struct.ite.write(oprot);
        }
        if (struct.isSetCnfe()) {
          struct.cnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ite = new com.qhuytu.jthriftfiles.exceptions.InvalidTypeException();
          struct.ite.read(iprot);
          struct.setIteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
          struct.cnfe.read(iprot);
          struct.setCnfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteNote_args implements org.apache.thrift.TBase<deleteNote_args, deleteNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNote_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteNote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteNote_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNote_args.class, metaDataMap);
    }

    public deleteNote_args() {
    }

    public deleteNote_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_args(deleteNote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteNote_args deepCopy() {
      return new deleteNote_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteNote_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_args)
        return this.equals((deleteNote_args)that);
      return false;
    }

    public boolean equals(deleteNote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteNote_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteNote_argsStandardScheme getScheme() {
        return new deleteNote_argsStandardScheme();
      }
    }

    private static class deleteNote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteNote_argsTupleScheme getScheme() {
        return new deleteNote_argsTupleScheme();
      }
    }

    private static class deleteNote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteNote_result implements org.apache.thrift.TBase<deleteNote_result, deleteNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNote_result");

    private static final org.apache.thrift.protocol.TField CNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnfe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteNote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteNote_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNFE((short)1, "cnfe");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNFE
            return CNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNFE, new org.apache.thrift.meta_data.FieldMetaData("cnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNote_result.class, metaDataMap);
    }

    public deleteNote_result() {
    }

    public deleteNote_result(
      com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe)
    {
      this();
      this.cnfe = cnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_result(deleteNote_result other) {
      if (other.isSetCnfe()) {
        this.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException(other.cnfe);
      }
    }

    public deleteNote_result deepCopy() {
      return new deleteNote_result(this);
    }

    @Override
    public void clear() {
      this.cnfe = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.CanNotFoundException getCnfe() {
      return this.cnfe;
    }

    public deleteNote_result setCnfe(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
      this.cnfe = cnfe;
      return this;
    }

    public void unsetCnfe() {
      this.cnfe = null;
    }

    /** Returns true if field cnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetCnfe() {
      return this.cnfe != null;
    }

    public void setCnfeIsSet(boolean value) {
      if (!value) {
        this.cnfe = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CNFE:
        if (value == null) {
          unsetCnfe();
        } else {
          setCnfe((com.qhuytu.jthriftfiles.exceptions.CanNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CNFE:
        return getCnfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CNFE:
        return isSetCnfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_result)
        return this.equals((deleteNote_result)that);
      return false;
    }

    public boolean equals(deleteNote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cnfe = true && this.isSetCnfe();
      boolean that_present_cnfe = true && that.isSetCnfe();
      if (this_present_cnfe || that_present_cnfe) {
        if (!(this_present_cnfe && that_present_cnfe))
          return false;
        if (!this.cnfe.equals(that.cnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCnfe()) ? 131071 : 524287);
      if (isSetCnfe())
        hashCode = hashCode * 8191 + cnfe.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCnfe()).compareTo(other.isSetCnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnfe, other.cnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteNote_result(");
      boolean first = true;

      sb.append("cnfe:");
      if (this.cnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.cnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteNote_resultStandardScheme getScheme() {
        return new deleteNote_resultStandardScheme();
      }
    }

    private static class deleteNote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
                struct.cnfe.read(iprot);
                struct.setCnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnfe != null) {
          oprot.writeFieldBegin(CNFE_FIELD_DESC);
          struct.cnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteNote_resultTupleScheme getScheme() {
        return new deleteNote_resultTupleScheme();
      }
    }

    private static class deleteNote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCnfe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnfe()) {
          struct.cnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
          struct.cnfe.read(iprot);
          struct.setCnfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class triggerNote_args implements org.apache.thrift.TBase<triggerNote_args, triggerNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<triggerNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerNote_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new triggerNote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new triggerNote_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerNote_args.class, metaDataMap);
    }

    public triggerNote_args() {
    }

    public triggerNote_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerNote_args(triggerNote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public triggerNote_args deepCopy() {
      return new triggerNote_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public triggerNote_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerNote_args)
        return this.equals((triggerNote_args)that);
      return false;
    }

    public boolean equals(triggerNote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(triggerNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("triggerNote_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerNote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public triggerNote_argsStandardScheme getScheme() {
        return new triggerNote_argsStandardScheme();
      }
    }

    private static class triggerNote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<triggerNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerNote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public triggerNote_argsTupleScheme getScheme() {
        return new triggerNote_argsTupleScheme();
      }
    }

    private static class triggerNote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<triggerNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class triggerNote_result implements org.apache.thrift.TBase<triggerNote_result, triggerNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<triggerNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerNote_result");

    private static final org.apache.thrift.protocol.TField CNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnfe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new triggerNote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new triggerNote_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNFE((short)1, "cnfe");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNFE
            return CNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNFE, new org.apache.thrift.meta_data.FieldMetaData("cnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.qhuytu.jthriftfiles.exceptions.CanNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerNote_result.class, metaDataMap);
    }

    public triggerNote_result() {
    }

    public triggerNote_result(
      com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe)
    {
      this();
      this.cnfe = cnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerNote_result(triggerNote_result other) {
      if (other.isSetCnfe()) {
        this.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException(other.cnfe);
      }
    }

    public triggerNote_result deepCopy() {
      return new triggerNote_result(this);
    }

    @Override
    public void clear() {
      this.cnfe = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.qhuytu.jthriftfiles.exceptions.CanNotFoundException getCnfe() {
      return this.cnfe;
    }

    public triggerNote_result setCnfe(@org.apache.thrift.annotation.Nullable com.qhuytu.jthriftfiles.exceptions.CanNotFoundException cnfe) {
      this.cnfe = cnfe;
      return this;
    }

    public void unsetCnfe() {
      this.cnfe = null;
    }

    /** Returns true if field cnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetCnfe() {
      return this.cnfe != null;
    }

    public void setCnfeIsSet(boolean value) {
      if (!value) {
        this.cnfe = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CNFE:
        if (value == null) {
          unsetCnfe();
        } else {
          setCnfe((com.qhuytu.jthriftfiles.exceptions.CanNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CNFE:
        return getCnfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CNFE:
        return isSetCnfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerNote_result)
        return this.equals((triggerNote_result)that);
      return false;
    }

    public boolean equals(triggerNote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cnfe = true && this.isSetCnfe();
      boolean that_present_cnfe = true && that.isSetCnfe();
      if (this_present_cnfe || that_present_cnfe) {
        if (!(this_present_cnfe && that_present_cnfe))
          return false;
        if (!this.cnfe.equals(that.cnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCnfe()) ? 131071 : 524287);
      if (isSetCnfe())
        hashCode = hashCode * 8191 + cnfe.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(triggerNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCnfe()).compareTo(other.isSetCnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnfe, other.cnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("triggerNote_result(");
      boolean first = true;

      sb.append("cnfe:");
      if (this.cnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.cnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerNote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public triggerNote_resultStandardScheme getScheme() {
        return new triggerNote_resultStandardScheme();
      }
    }

    private static class triggerNote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<triggerNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
                struct.cnfe.read(iprot);
                struct.setCnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnfe != null) {
          oprot.writeFieldBegin(CNFE_FIELD_DESC);
          struct.cnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerNote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public triggerNote_resultTupleScheme getScheme() {
        return new triggerNote_resultTupleScheme();
      }
    }

    private static class triggerNote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<triggerNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCnfe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnfe()) {
          struct.cnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnfe = new com.qhuytu.jthriftfiles.exceptions.CanNotFoundException();
          struct.cnfe.read(iprot);
          struct.setCnfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
